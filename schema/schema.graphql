schema {
  query: RootQuery
  mutation: Mutation
}

type Mutation {
  addUser(username: String!, email: String!, password: String!): NewUser
  addProduct(title: productTitle, descriptionShort: productDescriptionShort, descriptionLong: productDescriptionLong, weight: Int, amount: Int, available: Boolean, imgSmall: [String], imgBig: [String], price: Float!): NewProduct
  addOrder(ShippingProviderId: ID!, userId: ID!, orderProducts: [orderProductsInput]!): NewOrder
  addShippingProvider(name: String!, address: [String]!, options: [ShippingProviderOptionsInput]!): NewShippingProvider
}

type NewOrder {
  order: Order
}

type NewProduct {
  product: Product
}

type NewShippingProvider {
  ShippingProvider: ShippingProvider
}

type NewUser {
  user: User
}

type Order {
  id: ID
  total: Float
  totalWithShipping: Float
  status: String
  products: [OrderProducts]
  user: UserOfOrder
  shippingProvider: OrderShippingProvider
}

type OrderProducts {
  title: String
  amount: Int
  price: Float
  total: Float
  product: OrderProductsProduct
}

input orderProductsInput {
  id: ID!
  amount: Int!
}

type OrderProductsProduct {
  id: ID
  title(language: String!): String
  descriptionShort(language: String!): String
  descriptionLong(language: String!): String
  weight: Int
  amount: Int
  available: Boolean
  imgSmall: [String]
  imgBig: [String]
  price: Float
}

type OrderShippingProvider {
  name: String
  optionName: String
  price: Float
  shippingProvider: OrderShippingProviderProvider
}

type OrderShippingProviderProvider {
  id: ID
  name: String!
  address: [String]!
  options: [ShippingProviderOptions]!
}

type Product {
  id: ID
  title(language: String!): String
  descriptionShort(language: String!): String
  descriptionLong(language: String!): String
  weight: Int
  amount: Int
  available: Boolean
  imgSmall: [String]
  imgBig: [String]
  price: Float
}

input productDescriptionLong {
  en: String!
  rus: String
  est: String
}

input productDescriptionShort {
  en: String!
  rus: String
  est: String
}

input productTitle {
  en: String!
  rus: String
  est: String
}

type RootQuery {
  users: [User]
  user(id: ID!): User
  products: [Product]
  product(id: ID!): Product
  orders: [Order]
  order(id: ID!): Order
  ShippingProviders: [ShippingProvider]
  ShippingProvider(id: ID!): ShippingProvider
}

type ShippingProvider {
  id: ID
  name: String!
  address: [String]!
  options: [ShippingProviderOptions]!
}

type ShippingProviderOptions {
  name: String!
  price: Float!
}

input ShippingProviderOptionsInput {
  name: String!
  price: Float!
}

type User {
  id: ID
  username: String
  email: String
  password: String
  orders: [UserOrders]
}

type UserOfOrder {
  id: ID
  username: String
  email: String
  password: String
  orders: [UserOrders]
}

type UserOrders {
  id: ID
  total: Float
  totalWithShipping: Float
  status: String
  products: [OrderProducts]
  user: UserOfOrder
  shippingProvider: OrderShippingProvider
}
