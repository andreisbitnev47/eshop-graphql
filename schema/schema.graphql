schema {
  query: RootQuery
  mutation: Mutation
}

type Content {
  id: ID
  handle: String!
  group: String
  title(language: String!): [String]
  subTitle(language: String!): [String]
  paragraph(language: String!): [String]
  span(language: String!): [String]
  link(language: String!): [ContentLink]
  img(language: String!): [ContentImg]
  imgAll: [ContentImgAll]
}

type ContentImg {
  alt: String
  url: String
}

input contentImgAddInput {
  alt: contentImgAltAddInput
  url: String
}

type ContentImgAll {
  url: String
  alt: ContentImgAllAlt
}

type ContentImgAllAlt {
  en: String
  est: String
  rus: String
}

input contentImgAltAddInput {
  en: String
  est: String
  rus: String
}

input contentImgAltEditInput {
  en: String
  est: String
  rus: String
}

input contentImgEditInput {
  alt: contentImgAltEditInput
  url: String
}

type ContentLink {
  url: String
  anchor: String
}

input contentLinkAddInput {
  en: contentLinkEnAddInput
  est: contentLinkEstAddInput
  rus: contentLinkRusAddInput
}

input contentLinkEditInput {
  en: contentLinkEnEditInput
  est: contentLinkEstEditInput
  rus: contentLinkRusEditInput
}

input contentLinkEnAddInput {
  url: String
  anchor: String
}

input contentLinkEnEditInput {
  url: String
  anchor: String
}

input contentLinkEstAddInput {
  url: String
  anchor: String
}

input contentLinkEstEditInput {
  url: String
  anchor: String
}

input contentLinkRusAddInput {
  url: String
  anchor: String
}

input contentLinkRusEditInput {
  url: String
  anchor: String
}

input contentParagraphAddInput {
  en: String
  rus: String
  est: String
}

input contentParagraphEditInput {
  en: String
  rus: String
  est: String
}

input contentSpanAddInput {
  en: String
  rus: String
  est: String
}

input contentSpanEditInput {
  en: String
  rus: String
  est: String
}

input contentSubTitleAddInput {
  en: String
  rus: String
  est: String
}

input contentSubTitleEditInput {
  en: String
  rus: String
  est: String
}

input contentTitleAddInput {
  en: String
  rus: String
  est: String
}

input contentTitleEditInput {
  en: String
  rus: String
  est: String
}

type DeleteContent {
  content: Content
}

type DeleteImage {
  image: String
}

type DeleteImages {
  images: [String]
}

type DeleteOrder {
  order: Order
}

type DeleteProduct {
  product: Product
}

type DeleteTranslation {
  translation: Translation
}

type EditContent {
  content: Content
}

type EditOrder {
  order: Order
}

type EditProduct {
  product: Product
}

type EditTranslation {
  translation: Translation
}

type Login {
  token: String
}

type Mutation {
  addUser(username: String!, email: String!, password: String!, role: String!): NewUser
  login(username: String!, password: String!): Login
  addProduct(title: productTitleAddInput, descriptionShort: productDescriptionShortAddInput, descriptionLong: productDescriptionLongAddInput, weight: Int, amount: Int, available: Boolean, imgSmall: [String], imgBig: [String], price: Float!): NewProduct
  editProduct(id: ID!, handle: String, title: productTitleEditInput, descriptionShort: productDescriptionShortEditInput, descriptionLong: productDescriptionLongEditInput, weight: Int, amount: Int, available: Boolean, imgSmall: [String], imgBig: [String], price: Float): EditProduct
  deleteProduct(id: ID!): DeleteProduct
  deleteImage(id: String!): DeleteImage
  deleteImages(ids: [String]!): DeleteImages
  addOrder(shippingProviderId: ID!, shippingProviderAddress: String!, email: String!, phone: String, language: String, orderProducts: [orderProductsInput]!): NewOrder
  editOrder(id: ID!, status: String!): EditOrder
  deleteOrder(id: ID!): DeleteOrder
  addShippingProvider(name: String!, address: [String]!, options: [ShippingProviderOptionsInput]!): NewShippingProvider
  addTranslation(key: String!, en: String!, est: String!, rus: String!): NewTranslation
  editTranslation(id: ID!, en: String, est: String, rus: String): EditTranslation
  deleteTranslation(id: ID!): DeleteTranslation
  addContent(handle: String!, group: String, title: [contentTitleAddInput], subTitle: [contentSubTitleAddInput], paragraph: [contentParagraphAddInput], span: [contentSpanAddInput], link: [contentLinkAddInput], img: [contentImgAddInput]): NewContent
  editContent(id: ID!, title: [contentTitleEditInput], subTitle: [contentSubTitleEditInput], paragraph: [contentParagraphEditInput], span: [contentSpanEditInput], link: [contentLinkEditInput], img: [contentImgEditInput]): EditContent
  deleteContent(id: ID!): DeleteContent
}

type NewContent {
  content: Content
}

type NewOrder {
  order: Order
}

type NewProduct {
  product: Product
}

type NewShippingProvider {
  shippingProvider: ShippingProvider
}

type NewTranslation {
  translation: Translation
}

type NewUser {
  user: User
}

type Order {
  id: ID
  phone: String
  total: Float
  totalWithShipping: Float
  status: String
  products: [OrderProducts]
  user: UserOfOrder
  shippingProvider: OrderShippingProvider
}

type OrderProducts {
  productId: String
  title: String
  amount: Int
  price: Float
  total: Float
  product: OrderProductsProduct
}

input orderProductsInput {
  id: ID!
  amount: Int!
}

type OrderProductsProduct {
  id: ID
  title(language: String!): String
  descriptionShort(language: String!): String
  descriptionLong(language: String!): String
  handle: String
  weight: Int
  amount: Int
  available: Boolean
  imgSmall: [String]
  imgBig: [String]
  price: Float
}

type OrderShippingProvider {
  shippingProviderId: String
  shippingProviderAddress: String
  name: String
  optionName: String
  price: Float
  shippingProvider: OrderShippingProviderProvider
}

type OrderShippingProviderProvider {
  id: ID
  name: String!
  address: [String]!
  options: [ShippingProviderOptions]!
}

type Product {
  id: ID
  title(language: String!): String
  descriptionShort(language: String!): String
  descriptionLong(language: String!): String
  handle: String
  weight: Int
  amount: Int
  available: Boolean
  imgSmall: [String]
  imgBig: [String]
  price: Float
}

input productDescriptionLongAddInput {
  en: String!
  rus: String
  est: String
}

input productDescriptionLongEditInput {
  en: String
  rus: String
  est: String
}

input productDescriptionShortAddInput {
  en: String!
  rus: String
  est: String
}

input productDescriptionShortEditInput {
  en: String
  rus: String
  est: String
}

input productTitleAddInput {
  en: String!
  rus: String
  est: String
}

input productTitleEditInput {
  en: String
  rus: String
  est: String
}

type RootQuery {
  users: [User]
  user(id: ID!): User
  products(ids: [ID]): [Product]
  product(id: ID!): Product
  productByHandle(handle: String!): Product
  orders: [Order]
  order(id: ID!): Order
  ShippingProviders: [ShippingProvider]
  ShippingProvider(id: ID!): ShippingProvider
  translations: [Translation]
  translation(id: ID!): Translation
  translationByKey(key: String!): Translation
  contents: [Content]
  content(id: ID!): Content
  contnetByHandle(handle: String!): Content
  contnetsByGroup(group: String!): [Content]
  images: [String]
}

type ShippingProvider {
  id: ID
  name: String!
  address: [String]!
  options: [ShippingProviderOptions]!
}

type ShippingProviderOptions {
  name: String!
  price: Float!
}

input ShippingProviderOptionsInput {
  name: String!
  price: Float!
}

type Translation {
  id: ID
  key: String!
  translation(language: String!): String
}

type User {
  id: ID
  username: String
  email: String
  role: String
  orders: [UserOrders]
}

type UserOfOrder {
  id: ID
  username: String
  email: String
  role: String
  orders: [UserOrders]
}

type UserOrders {
  id: ID
  phone: String
  total: Float
  totalWithShipping: Float
  status: String
  products: [OrderProducts]
  user: UserOfOrder
  shippingProvider: OrderShippingProvider
}
