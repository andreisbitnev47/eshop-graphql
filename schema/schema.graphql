schema {
  query: RootQuery
  mutation: Mutation
}

type Content {
  id: ID
  handle: String!
  group: String
  title(language: String!): [String]
  subTitle(language: String!): [String]
  paragraph(language: String!): [String]
  span(language: String!): [String]
  link(language: String!): [ContentLink]
  img(language: String!): [ContentImg]
}

type ContentImg {
  alt: String
  url: String
}

input contentImgAltInput {
  en: String
  est: String
  rus: String
}

input contentImgInput {
  alt: contentImgAltInput
  url: String
}

type ContentLink {
  url: String
  anchor: String
}

input contentLinkEnInput {
  url: String
  anchor: String
}

input contentLinkEstInput {
  url: String
  anchor: String
}

input contentLinkInput {
  en: contentLinkEnInput
  est: contentLinkEstInput
  rus: contentLinkRusInput
}

input contentLinkRusInput {
  url: String
  anchor: String
}

input contentParagraphInput {
  en: String
  rus: String
  est: String
}

input contentSpanInput {
  en: String
  rus: String
  est: String
}

input contentSubTitleInput {
  en: String
  rus: String
  est: String
}

input contentTitleInput {
  en: String
  rus: String
  est: String
}

type DeleteImage {
  image: String
}

type DeleteImages {
  images: [String]
}

type DeleteProduct {
  product: Product
}

type EditProduct {
  product: Product
}

type Login {
  token: String
}

type Mutation {
  addUser(username: String!, email: String!, password: String!, role: String!): NewUser
  login(username: String!, password: String!): Login
  addProduct(title: productTitleAddInput, descriptionShort: productDescriptionShortAddInput, descriptionLong: productDescriptionLongAddInput, weight: Int, amount: Int, available: Boolean, imgSmall: [String], imgBig: [String], price: Float!): NewProduct
  editProduct(id: ID!, title: productTitleEditInput, descriptionShort: productDescriptionShortEditInput, descriptionLong: productDescriptionLongEditInput, weight: Int, amount: Int, available: Boolean, imgSmall: [String], imgBig: [String], price: Float): EditProduct
  deleteProduct(id: ID!): DeleteProduct
  deleteImage(id: String!): DeleteImage
  deleteImages(ids: [String]!): DeleteImages
  addOrder(ShippingProviderId: ID!, email: String!, phone: String, orderProducts: [orderProductsInput]!): NewOrder
  addShippingProvider(name: String!, address: [String]!, options: [ShippingProviderOptionsInput]!): NewShippingProvider
  addTranslation(key: String!, en: String!, est: String!, rus: String!): NewTranslation
  addContent(handle: String!, group: String, title: [contentTitleInput], subTitle: [contentSubTitleInput], paragraph: [contentParagraphInput], span: [contentSpanInput], link: [contentLinkInput], img: [contentImgInput]): NewContent
}

type NewContent {
  content: Content
}

type NewOrder {
  order: Order
}

type NewProduct {
  product: Product
}

type NewShippingProvider {
  shippingProvider: ShippingProvider
}

type NewTranslation {
  translation: Translation
}

type NewUser {
  user: User
}

type Order {
  id: ID
  phone: String
  total: Float
  totalWithShipping: Float
  status: String
  products: [OrderProducts]
  user: UserOfOrder
  shippingProvider: OrderShippingProvider
}

type OrderProducts {
  productId: String
  title: String
  amount: Int
  price: Float
  total: Float
  product: OrderProductsProduct
}

input orderProductsInput {
  id: ID!
  amount: Int!
}

type OrderProductsProduct {
  id: ID
  title(language: String!): String
  descriptionShort(language: String!): String
  descriptionLong(language: String!): String
  handle: String
  weight: Int
  amount: Int
  available: Boolean
  imgSmall: [String]
  imgBig: [String]
  price: Float
}

type OrderShippingProvider {
  shippingProviderId: String
  name: String
  optionName: String
  price: Float
  shippingProvider: OrderShippingProviderProvider
}

type OrderShippingProviderProvider {
  id: ID
  name: String!
  address: [String]!
  options: [ShippingProviderOptions]!
}

type Product {
  id: ID
  title(language: String!): String
  descriptionShort(language: String!): String
  descriptionLong(language: String!): String
  handle: String
  weight: Int
  amount: Int
  available: Boolean
  imgSmall: [String]
  imgBig: [String]
  price: Float
}

input productDescriptionLongAddInput {
  en: String!
  rus: String
  est: String
}

input productDescriptionLongEditInput {
  en: String
  rus: String
  est: String
}

input productDescriptionShortAddInput {
  en: String!
  rus: String
  est: String
}

input productDescriptionShortEditInput {
  en: String
  rus: String
  est: String
}

input productTitleAddInput {
  en: String!
  rus: String
  est: String
}

input productTitleEditInput {
  en: String
  rus: String
  est: String
}

type RootQuery {
  users: [User]
  user(id: ID!): User
  products: [Product]
  product(id: ID!): Product
  productByHandle(handle: String!): Product
  orders: [Order]
  order(id: ID!): Order
  ShippingProviders: [ShippingProvider]
  ShippingProvider(id: ID!): ShippingProvider
  translations: [Translation]
  translation(id: ID!): Translation
  translationByKey(key: String!): Translation
  contents: [Content]
  content(id: ID!): Content
  contnetByHandle(handle: String!): Content
  contnetsByGroup(group: String!): [Content]
  images: [String]
}

type ShippingProvider {
  id: ID
  name: String!
  address: [String]!
  options: [ShippingProviderOptions]!
}

type ShippingProviderOptions {
  name: String!
  price: Float!
}

input ShippingProviderOptionsInput {
  name: String!
  price: Float!
}

type Translation {
  id: ID
  key: String!
  translation(language: String!): String
}

type User {
  id: ID
  username: String
  email: String
  role: String
  orders: [UserOrders]
}

type UserOfOrder {
  id: ID
  username: String
  email: String
  role: String
  orders: [UserOrders]
}

type UserOrders {
  id: ID
  phone: String
  total: Float
  totalWithShipping: Float
  status: String
  products: [OrderProducts]
  user: UserOfOrder
  shippingProvider: OrderShippingProvider
}
